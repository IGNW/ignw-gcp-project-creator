#Download private key to local folder
#resource "local_file" "provisioner-svc-private" {
#    content     = "${base64decode(google_service_account_key.provisioner.private_key)}"
#    filename = "~/provisioner-svc.json"
#}





troubleshooting

*
# Create the Project under the the new Provisioner/ folder, Internal IGNW Work --> Provisioner
resource "google_project" "provisioner-project" {
   name            = "${random_id.random.hex}"
   project_id      = "${random_id.random.hex}"
  folder_id        = "${google_folder.provisioner.name}"
}


# Enable APIs

# Cloud Resource Manager API: Creates, reads, and updates metadata for Google Cloud Platform resource containers.
resource "google_project_service" "cloud_resource_manager_api" {
  service = "cloudresourcemanager.googleapis.com"
  project = "${google_project.provisioner-project.project_id}"
  disable_on_destroy = false
}
# Google Service Management allows service producers to publish their services on Google Cloud
resource "google_project_service" "service_management_api" {
  service = "servicemanagement.googleapis.com"
  project = "${google_project.provisioner-project.project_id}"
  disable_on_destroy = false
}

# Google Service Management allows service producers to publish their services on Google Cloud
resource "google_project_service" "iam_api" {
  service = "iam.googleapis.com"
  project = "${google_project.provisioner-project.project_id}"
  disable_on_destroy = false
}


# Google Service Management allows service producers to publish their services on Google Cloud
resource "google_project_service" "cloud_billing_api" {
  service = "cloudbilling.googleapis.com"
  project = "${google_project.provisioner-project.project_id}"
  disable_on_destroy = false
}

# Google Service Management allows service producers to publish their services on Google Cloud
resource "google_project_service" "kubernetes_engine_api" {
  service = "container.googleapis.com"
  project = "${google_project.provisioner-project.project_id}"
  disable_on_destroy = false
}

# END Enable APIs


# Create the provisioner service account
resource "google_service_account" "provisioner-svc" {
  account_id   = "provisioner-svc"
  display_name = "provisioner-svc"
  project      = "${google_project.provisioner-project.project_id}"
  folder

}

# Create a service account key
resource "google_service_account_key" "provisioner" {
  service_account_id = "${google_service_account.provisioner-svc.name}"

}

# Pulls key json into Kubernetes secret
resource "kubernetes_secret" "provisioner-svc-credentials" {
  metadata = {
    name = "provisioner-svc-credentials"
  }
  data {
    credentials.json = "${base64decode(google_service_account_key.provisioner.private_key)}"
  }
}

# Add the service account to the project
resource "google_project_iam_member" "service-account" {
  count   = "${length(var.service_account_iam_roles)}"
  project = "${google_project.provisioner-project.project_id}"
  role    = "${element(var.service_account_iam_roles, count.index)}"
  member  = "serviceAccount:${google_service_account.provisioner-svc.email}"
}
*/


gcloud kms keys add-iam-policy-binding "provisioner-key" \
  --location us-west2 \
  --keyring provisioner-ring \
  --member serviceAccount:provisioner-svc@provisioner-66f06be8df9d2029.iam.gserviceaccount.com \
  --role roles/cloudkms.cryptoKeyEncrypterDecrypter \
  --project provisioner-66f06be8df9d2029


  # Add the service account to the project
#resource "google_project_iam_member" "service-account" {
#  count   = "${length(var.service_account_iam_roles)}"
#  project = "${google_project.provisioner-project.project_id}"
#  role    = "${element(var.service_account_iam_roles, count.index)}"
#  member  = "serviceAccount:${google_service_account.provisioner-svc.name}"



resource "google_project_iam_policy" "project-provisioner" {
  project      = "${google_project.provisioner-project.project_id}"
  policy_data = "${data.google_iam_policy.provisioner-policy.policy_data}"
}

data "google_iam_policy" "provisioner-policy" {
  binding {
    role = "roles/billing.projectManager"

    members = [
      "serviceAccount: ${google_service_account.provisioner-svc.name}"
    ]
  }
}
}